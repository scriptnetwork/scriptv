using System;
using System.Collections.Generic;
using System.IO;
using us.gov.crypto;
using static us.gov.cash.tx;

namespace us.wallet
{
    public class daemon_rpc_api : daemon_api
    {
        wallet_rpc_api w;
        pairing_rpc_api p;
        sys_rpc_api s;
        rpc_api endpoint;

        public bool connected()
        {
            return endpoint.connected();
        }

        public daemon_rpc_api(KeyPair k, String whost, short wport)
        {
            try
            {
                endpoint = new rpc_api(k, whost, wport);
                w = new wallet_rpc_api(endpoint);
                p = new pairing_rpc_api(endpoint);
                s = new sys_rpc_api(endpoint);
            }
            catch (Exception e)
            {
                System.Diagnostics.Debug.WriteLine("Daemon_rpc_api:" + e.Message + "   " + e.StackTrace);
            }
        }
//---------------------------------------------------------------------generated by make, do not edit
//content of file: ../../../api/apitool_generated__functions_wallet-daemon_cs_impl
//------------------generated by apitool- do not edit
// wallet - master file: us/apitool/data/wallet
  public void ping(Stream a0) { w.ping(a0); }
  public void balance(bool a0, Stream a1) { w.balance(a0, a1); }
  public void list(bool a0, Stream a1) { w.list(a0, a1); }
  public void new_address(Stream a0) { w.new_address(a0); }
  public void add_address(byte[] a0, Stream a1) { w.add_address(a0, a1); }
  public void transfer(byte[] a0, long a1, byte[] a2, Stream a3) { w.transfer(a0, a1, a2, a3); }
  public void transfer_from(byte[] a0, byte[] a1, long a2, byte[] a3, Stream a4) { w.transfer_from(a0, a1, a2, a3, a4); }
  public void tx_charge_pay(byte[] a0, long a1, byte[] a2, long a3, byte[] a4, Stream a5) { w.tx_charge_pay(a0, a1, a2, a3, a4, a5); }
  public void tx_pay(string a0, Stream a1) { w.tx_pay(a0, a1); }
  public void tx_new(Stream a0) { w.tx_new(a0); }
  public void tx_add_section(string a0, byte[] a1, Stream a2) { w.tx_add_section(a0, a1, a2); }
  public void tx_add_input(string a0, int a1, byte[] a2, long a3, Stream a4) { w.tx_add_input(a0, a1, a2, a3, a4); }
  public void tx_add_output(string a0, int a1, byte[] a2, long a3, Stream a4) { w.tx_add_output(a0, a1, a2, a3, a4); }
  public void tx_make_p2pkh(tx_make_p2pkh_input a0, Stream a1) { w.tx_make_p2pkh(a0, a1); }
  public void tx_sign(string a0, string a1, Stream a2) { w.tx_sign(a0, a1, a2); }
  public void tx_send(string a0, Stream a1) { w.tx_send(a0, a1); }
  public void tx_decode(string a0, Stream a1) { w.tx_decode(a0, a1); }
  public void tx_check(string a0, Stream a1) { w.tx_check(a0, a1); }
  public void set_supply(byte[] a0, long a1, Stream a2) { w.set_supply(a0, a1, a2); }
  public void store_kv(byte[] a0, string a1, string a2, Stream a3) { w.store_kv(a0, a1, a2, a3); }
  public void rm_kv(byte[] a0, string a1, Stream a2) { w.rm_kv(a0, a1, a2); }
  public void store_file(byte[] a0, byte[] a1, Stream a2) { w.store_file(a0, a1, a2); }
  public void rm_file(byte[] a0, byte[] a1, Stream a2) { w.rm_file(a0, a1, a2); }
  public void search(byte[] a0, string a1, Stream a2) { w.search(a0, a1, a2); }
  public void file(byte[] a0, Stream a1) { w.file(a0, a1); }

// pairing - master file: us/apitool/data/pairing
  public void pair(byte[] a0, string a1, string a2, Stream a3) { p.pair(a0, a1, a2, a3); }
  public void unpair(byte[] a0, Stream a1) { p.unpair(a0, a1); }
  public void list_devices(Stream a0) { p.list_devices(a0); }

// sys - master file: us/apitool/data/sys

//-/----------------generated by apitool- do not edit

//content of file: ../../../api/apitool_generated__functions_wallet_daemon_cs_rpc-impl
//------------------generated by apitool- do not edit
public void list_protocols(Stream a0) {
    endpoint.ask_string(protocol.wallet_daemon_list_protocols, a0);
}

public void trade(string a0, string a1, string a2, Stream a3) {
    String o;
    o += to_string(a0) + ' ';
    o += to_string(a1) + ' ';
    o += to_string(a2) + ' ';
    endpoint.ask_string(protocol.wallet_daemon_trade, o, a3);
}

public void list_trades(Stream a0) {
    endpoint.ask_string(protocol.wallet_daemon_list_trades, a0);
}

public void kill_trade(byte[] a0, Stream a1) {
    String o;
    o += to_string(a0) + ' ';
    endpoint.ask_string(protocol.wallet_daemon_kill_trade, o, a1);
}

public void command_trade(byte[] a0, string a1, Stream a2) {
    String o;
    o += to_string(a0) + ' ';
    o += to_string(a1) + ' ';
    endpoint.ask_string(protocol.wallet_daemon_command_trade, o, a2);
}

public void command_trade_bin(byte[] a0, string a1, Stream a2) {
    String o;
    o += to_string(a0) + ' ';
    o += to_string(a1) + ' ';
    endpoint.ask_bin(protocol.wallet_daemon_command_trade_bin, o, a2);
}

public void grid(Stream a0) {
    endpoint.ask_string(protocol.wallet_daemon_grid, a0);
}

//-/----------------generated by apitool- do not edit

//-/-------------------------------------------------------------------generated by make, do not edit

    }
}
